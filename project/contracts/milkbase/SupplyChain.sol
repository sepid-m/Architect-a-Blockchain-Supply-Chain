pragma solidity ^0.5.0;

// Import the `Roles` library
import "../milkcore/Ownable.sol";
import "../milkaccesscontrol/PoultererRole.sol";
import "../milkaccesscontrol/DairyfactoryRole.sol";
import "../milkaccesscontrol/DistributorRole.sol";
import "../milkaccesscontrol/RetailerRole.sol";
import "../milkaccesscontrol/SupermarketRole.sol";
import "../milkaccesscontrol/ConsumerRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is Ownable, PoultererRole, DairyfactoryRole, DistributorRole, RetailerRole, SupermarketRole, ConsumerRole {

  // Define 'owner'
  //address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Obtained,                  // 0
    Stored,                    // 1
    ForSaleToDairyfactory,     // 2
    SoldToDairyfactory,        // 3
    ShippedToDairyfactory,     // 4
    ReceivedByDairyfactory,    // 5
    Tested,                    // 6
    Qualified,                 // 7
    Failed,                    // 8
    Processed,                 // 9
    Returned,                  // 10
    Retaken,                   // 11
    ShippedToPoulterer,        // 12
    ReceivedByPoulterer,       // 13
    Destroyed,                 // 14
    Packed,                    // 15
    ForSaleToDistributor,      // 16
    SoldToDistributor,         // 17
    ShippedToDistributor,      // 18
    ReceivedByDistributor,     // 19
    ForSaleToRetailer,         // 20
    SoldToRetailer,            // 21
    ShippedToRetailer,         // 22
    ReceivedByRetailer,        // 23
    ForSaleToSupermarket,      // 24
    SoldToSupermarket,         // 25 
    ShippedToSupermarket,      // 26
    ReceivedBySupermarket,     // 27
    ForSaleToConsumer,         // 28
    SoldToConsumer,            // 29
    PurchasedByConsumer        // 30
  }

  State constant defaultState = State.Obtained;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Poulterer, goes on the package, can be verified by the Consumer
    bool    existItem; // Boolean to check the existence of the item easily
    address payable ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 31 stages
    address payable originPoultererID; // Metamask-Ethereum address of the Poulterer
    string  originFarmName; // Poulterer Name
    string  originFarmInformation;  // Poulterer Information
    string  originFarmLatitude; // Farm Latitude
    string  originFarmLongitude;  // Farm Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    bool    isQualified; // The quality status of the milk.
    State   itemState;  // Product State as represented in the enum above
    address payable dairyfactoryID;  // Metamask-Ethereum address of the Dairyfactory
    address payable distributorID;  // Metamask-Ethereum address of the Distributor
    address payable retailerID; // Metamask-Ethereum address of the Retailer
    address payable supermarketID;  // Metamask-Ethereum address of the Supermarket
    address payable consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 15 events with the same 15 state values and accept 'upc' as input argument
  event Obtained(uint upc, address emiter);
  event Stored(uint upc, address emiter);
  event ForSaleToDairyfactory(uint upc, address emiter, uint price);
  event SoldToDairyfactory(uint upc, address emiter);
  event ShippedToDairyfactory(uint upc, address emiter);
  event ReceivedByDairyfactory(uint upc, address emiter);
  event Tested(uint upc, address emiter, bool testResult);
  event Processed(uint upc, address emiter);
  event Returned(uint upc, address emiter);
  event Retaken(uint upc, address emiter);
  event ShippedToPoulterer(uint upc, address emiter);
  event ReceivedByPoulterer(uint upc, address emiter);
  event Destroyed(uint upc, address emiter);
  event Packed(uint upc, address emiter);
  event ForSaleToDistributor(uint upc, address emiter, uint price);
  event SoldToDistributor(uint upc, address emiter);
  event ShippedToDistributor(uint upc, address emiter);
  event ReceivedByDistributor(uint upc, address emiter);
  event ForSaleToRetailer(uint upc, address emiter, uint price);
  event SoldToRetailer(uint upc, address emiter);
  event ShippedToRetailer(uint upc, address emiter);
  event ReceivedByRetailer(uint upc, address emiter);
  event ForSaleToSupermarket(uint upc, address emiter, uint price);
  event SoldToSupermarket(uint upc, address emiter);
  event ShippedToSupermarket(uint upc, address emiter);
  event ReceivedBySupermarket(uint upc, address emiter);
  event ForSaleToConsumer(uint upc, address emiter, uint price);
  event SoldToConsumer(uint upc, address emiter);
  event PurchasedByConsumer(uint upc, address emiter);

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    msg.sender.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier checkItemState (uint _upc, State _state, string memory _errorMessage){
    require(items[_upc].itemState == _state, _errorMessage);
    _;
  }

  // Define a modifier that checks if a _upc is already in the items mapping
  modifier checkUpcInItems(uint _upc) {
    require(items[_upc].existItem, "This UPC does not exist in items mapping.");
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
     selfdestruct(this.owner()); 
  }

  // Define a function 'obtainItem' that allows a poulterer to mark an item 'Obtained'
  function obtainItem(
                  uint _upc, 
                  address payable _originPoultererID, 
                  string memory _originFarmName, 
                  string memory _originFarmInformation, 
                  string memory _originFarmLatitude, 
                  string memory _originFarmLongitude, 
                  string memory _productNotes) 
                  public onlyPoulterer()
  {
    // Add the new item as part of Obtain
    Item memory newItem = Item(
      sku,                      // Stock Keeping Unit (SKU)
      _upc,                     // Universal Product Code (UPC)
      true,                     // Boolean to check the existence of the item easily
      _originPoultererID,       // Metamask-Ethereum address of the current owner
      _originPoultererID,       // Metamask-Ethereum address of the Poulterer
      _originFarmName,          // Poulterer Name
      _originFarmInformation,   // Poulterer Information  
      _originFarmLatitude,      // Farm Latitude     
      _originFarmLongitude,     // Farm Longitude   
      _upc + sku,               // Product ID
      _productNotes,            // Product Note
      0,                        // Product Price
      false,                    // The quality status of milk.
      State.Obtained,           // Product State
      address(0),               // Metamask-Ethereum address of the Dairyfactory
      address(0),               // Metamask-Ethereum address of the Distributor
      address(0),               // Metamask-Ethereum address of the Retailer
      address(0),               // Metamask-Ethereum address of the Supermarket
      address(0)                // Metamask-Ethereum address of the Consumer
    );
    items[_upc] = newItem;
    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    emit Obtained(_upc, msg.sender);
  }

  // Define a function 'StoreItem' that allows a poulterer to mark an item 'Stored'
  function storeItem(uint _upc) public
          onlyPoulterer()
          checkUpcInItems (_upc)
          checkItemState (_upc, State.Obtained, "Milk is not obtained!")
          verifyCaller(items[_upc].ownerID) // Check the caller is the owner of the item
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Stored;
    
    // Emit the appropriate event
    emit Stored(_upc, msg.sender);
  }

  // Define a function 'sellToDairyfactory' that allows a poulterer to mark an item 'ForSaleToDairyfactory'
  function sellToDairyfactory(uint _upc, uint _price) public
         onlyPoulterer()
         checkUpcInItems (_upc)
         verifyCaller(items[_upc].ownerID) // Check if caller is the owner of the item
         checkItemState (_upc, State.Stored, "Milk is not stored!")
  {
      // Update the appropriate fields
      items[_upc].itemState = State.ForSaleToDairyfactory;
      items[_upc].productPrice = _price;
  
      // Emit the appropriate event
      emit ForSaleToDairyfactory(_upc, msg.sender, _price);
  }

  // Define a function 'buyItemByDairyfactory' that allows the dairyfactory to mark an item 'SoldToDairyfactory'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItemByDairyfactory(uint _upc) public payable
          onlyDairyfactory()
          checkUpcInItems (_upc)
          checkItemState (_upc, State.ForSaleToDairyfactory, "Milk is not for sale to dairyfactory!")
          paidEnough(items[_upc].productPrice) // Check if buyer has paid enough 
          checkValue(_upc) // Send any excess Ether back to buyer
    {
    // Update the appropriate fields - ownerID, dairyfactoryID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].dairyfactoryID = msg.sender;
    items[_upc].itemState = State.SoldToDairyfactory;
    
    // Transfer money to poulterer
    items[_upc].originPoultererID.transfer(items[_upc].productPrice);
    
    // emit the appropriate event
    emit SoldToDairyfactory(_upc, msg.sender);
  }

  // Define a function 'shipItemToDairyfactory' that allows the poulterer to mark an item 'ShippedToDairyfactory'
  // Use the above modifers to check if the item is sold
  function shipItemToDairyfactory(uint _upc) public
         onlyPoulterer()
         checkUpcInItems (_upc)
         verifyCaller(items[_upc].originPoultererID) // Check if caller is the poulterer of the item
         checkItemState (_upc, State.SoldToDairyfactory, "Milk is not sold to dairyfactory!")   
    {
    // Update the appropriate fields
    items[_upc].itemState = State.ShippedToDairyfactory;

    // Emit the appropriate event
    emit ShippedToDairyfactory(_upc, msg.sender);
  }

  // Define a function 'receiveItemByDairyfactory' that allows the dairyfactory to mark an item 'ReceivedByDairyfactory'
  // Use the above modifiers to check if the item is shipped
  function receiveItemByDairyfactory(uint _upc) public
         onlyDairyfactory()
         checkUpcInItems (_upc)
         verifyCaller(items[_upc].ownerID) // Check if caller is the owner of the item
         checkItemState (_upc, State.ShippedToDairyfactory, "Milk is not shipped to dairyfactory!") 
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].itemState = State.ReceivedByDairyfactory;

    // Emit the appropriate event
    emit ReceivedByDairyfactory(_upc, msg.sender);
  }

  // Define a function 'testMilk' that allows the dairyfactory to mark an item 'Qualified or Failed'
  // Use the above modifiers to check if the item is received
  function testMilk(uint _upc, bool _testResult) public
         onlyDairyfactory()
         checkUpcInItems (_upc)
         verifyCaller(items[_upc].ownerID) // Check if caller is the owner of the item
         checkItemState (_upc, State.ReceivedByDairyfactory, "Milk is not received by dairyfactory!") 
    {
      if  (_testResult) {
        // Update the appropriate fields - ownerID, retailerID, itemState
        items[_upc].itemState = State.Qualified;
        // Emit the appropriate event
        //emit Qualified(_upc, msg.sender);
      } else {
        // Update the appropriate fields - ownerID, retailerID, itemState
        items[_upc].itemState = State.Failed;
        // Emit the appropriate event
        //emit Failed(_upc, msg.sender);
      }
  }

  // Define a function 'processMilk' that allows the dairyfactory to mark an item 'Processed'
  // Use the above modifiers to check if the item is qualified
  function processMilk(uint _upc) public
         onlyDairyfactory()
         checkUpcInItems (_upc)
         verifyCaller(items[_upc].ownerID) // Check if caller is the owner of the item
         checkItemState (_upc, State.ReceivedByDairyfactory, "Milk is not qualified the quality test!") 
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].itemState = State.Processed;

    // Emit the appropriate event
    emit Processed(_upc, msg.sender);
  }

  // Define a function 'returnMilk' that allows the dairyfactory to mark an item 'Returned'
  // Use the above modifiers to check if the item is qualified
  function returnMilk(uint _upc) public
         onlyDairyfactory()
         checkUpcInItems (_upc)
         verifyCaller(items[_upc].ownerID) // Check if caller is the owner of the item
         checkItemState (_upc, State.Failed, "Milk is not failed the quality test!") 
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].itemState = State.Returned;

    // Emit the appropriate event
    emit Returned(_upc, msg.sender);
  }

  // Define a function 'retakeMilk' that allows the poulterer to mark an item 'Retaken'
  function retakeMilk(uint _upc) public 
          onlyPoulterer()
          checkUpcInItems (_upc)
          verifyCaller(items[_upc].originPoultererID) // Check if caller is the poulterer of the item
          checkItemState (_upc, State.Returned, "Milk is not returned to poulterer!")
    {
    // Update the appropriate fields - ownerID, dairyfactoryID, itemState
    items[_upc].itemState = State.Retaken;
    
    // emit the appropriate event
    emit Retaken(_upc, msg.sender);
  }

  // Define a function 'shipItemToPoulterer' that allows the dairy factory to mark an item 'ShippedToPoulterer'
  // Use the above modifers to check if the item is retaken
  function shipItemToPoulterer(uint _upc) public
         onlyDairyfactory()
         checkUpcInItems (_upc)
         verifyCaller(items[_upc].originPoultererID) // Check if caller is the poulterer of the item
         checkItemState (_upc, State.Retaken, "Milk is not retaken by dairy factory!")   
    {
    // Update the appropriate fields
    items[_upc].itemState = State.ShippedToPoulterer;

    // Emit the appropriate event
    emit ShippedToPoulterer(_upc, msg.sender);
  }

  // Define a function 'receiveItemByPoulterer' that allows the dairyfactory to mark an item 'ReceivedByPoulterer'
  // Use the above modifiers to check if the item is ShippedToPoulterer
  function receiveItemByPoulterer(uint _upc) public
         onlyPoulterer()
         checkUpcInItems (_upc)
         verifyCaller(items[_upc].ownerID) // Check if caller is the owner of the item
         checkItemState (_upc, State.ShippedToPoulterer, "Milk is not shipped to poulterer!") 
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].itemState = State.ReceivedByPoulterer;

    // Emit the appropriate event
    emit ReceivedByPoulterer(_upc, msg.sender);
  }

  // Define a function 'destroyMilk' that allows the poulterer to mark an item 'Destroyed'
  // Use the above modifiers to check if the item is ReceivedByPoulterer
  function destroyMilk(uint _upc) public
         onlyPoulterer()
         checkUpcInItems (_upc)
         verifyCaller(items[_upc].ownerID) // Check if caller is the owner of the item
         checkItemState (_upc, State.ReceivedByPoulterer, "Milk is not received by poulterer!") 
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].itemState = State.Destroyed;

    // Emit the appropriate event
    emit Destroyed(_upc, msg.sender);
  }

  // Define a function 'packMilk' that allows the dairy factory to mark an item 'Packed'
  // Use the above modifiers to check if the item is processed
  function packMilk(uint _upc) public
         onlyDairyfactory()
         checkUpcInItems (_upc)
         verifyCaller(items[_upc].ownerID) // Check if caller is the owner of the item
         checkItemState (_upc, State.Processed, "Milk is not processed!") 
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].itemState = State.Packed;

    // Emit the appropriate event
    emit Packed(_upc, msg.sender);
  }

  // Define a function 'sellToDistributor' that allows a dairy factory to mark an item 'ForSaleToDistributor'
  function sellToDistributor(uint _upc, uint _price) public
         onlyDairyfactory()
         checkUpcInItems (_upc)
         verifyCaller(items[_upc].ownerID) // Check if caller is the owner of the item
         checkItemState (_upc, State.Packed, "Milk is not packed!")
  {
      // Update the appropriate fields
      items[_upc].itemState = State.ForSaleToDistributor;
      items[_upc].productPrice = _price;
  
      // Emit the appropriate event
      emit ForSaleToDistributor(_upc, msg.sender, _price);
  }

  // Define a function 'buyItemByDistributor' that allows the distributor to mark an item 'SoldToDistributor'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItemByDistributor(uint _upc) public payable
          onlyDistributor()
          checkUpcInItems (_upc)
          checkItemState (_upc, State.ForSaleToDistributor, "Milk is not for sale to distributor!")
          paidEnough(items[_upc].productPrice) // Check if buyer has paid enough 
          checkValue(_upc) // Send any excess Ether back to buyer
    {
    // Update the appropriate fields - ownerID, dairyfactoryID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].distributorID = msg.sender;
    items[_upc].itemState = State.SoldToDistributor;
    
    // Transfer money to poulterer
    items[_upc].dairyfactoryID.transfer(items[_upc].productPrice);
    
    // emit the appropriate event
    emit SoldToDistributor(_upc, msg.sender);
  }

  // Define a function 'shipItemToDistributor' that allows the dairy factory to mark an item 'ShippedToDistributor'
  // Use the above modifers to check if the item is sold
  function shipItemToDistributor(uint _upc) public
         onlyDairyfactory()
         checkUpcInItems (_upc)
         verifyCaller(items[_upc].dairyfactoryID) // Check if caller is the owner of the item
         checkItemState (_upc, State.SoldToDistributor, "Milk is not sold to distributor!")   
    {
    // Update the appropriate fields
    items[_upc].itemState = State.ShippedToDistributor;

    // Emit the appropriate event
    emit ShippedToDistributor(_upc, msg.sender);
  }

  // Define a function 'receiveItemByDistributor' that allows the distributor to mark an item 'ReceivedByDistributor'
  // Use the above modifiers to check if the item is shipped
  function receiveItemByDistributor(uint _upc) public
         onlyDistributor()
         checkUpcInItems (_upc)
         verifyCaller(items[_upc].distributorID) // Check if caller is the owner of the item
         checkItemState (_upc, State.ShippedToDistributor, "Milk is not shipped to distributor!") 
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].itemState = State.ReceivedByDistributor;

    // Emit the appropriate event
    emit ReceivedByDistributor(_upc, msg.sender);
  }

  // Define a function 'sellToRetailer' that allows a dairy factory to mark an item 'ForSaleToRetailer'
  function sellToRetailer(uint _upc, uint _price) public
         onlyDistributor()
         checkUpcInItems (_upc)
         verifyCaller(items[_upc].distributorID) // Check if caller is the owner of the item
         checkItemState (_upc, State.ReceivedByDistributor, "Milk is not received by distributor!")
  {
      // Update the appropriate fields
      items[_upc].itemState = State.ForSaleToRetailer;
      items[_upc].productPrice = _price;
  
      // Emit the appropriate event
      emit ForSaleToRetailer(_upc, msg.sender, _price);
  }

  // Define a function 'buyItemByRetailer' that allows the retailer to mark an item 'SoldToRetailer'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItemByRetailer(uint _upc) public payable
          onlyRetailer()
          checkUpcInItems (_upc)
          checkItemState (_upc, State.ForSaleToRetailer, "Milk is not for sale to retailer!")
          paidEnough(items[_upc].productPrice) // Check if buyer has paid enough 
          checkValue(_upc) // Send any excess Ether back to buyer
    {
    // Update the appropriate fields - ownerID, dairyfactoryID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].retailerID = msg.sender;
    items[_upc].itemState = State.SoldToRetailer;
    
    // Transfer money to poulterer
    items[_upc].distributorID.transfer(items[_upc].productPrice);
    
    // emit the appropriate event
    emit SoldToRetailer(_upc, msg.sender);
  }

  // Define a function 'shipItemToRetailer' that allows the distributor to mark an item 'ShippedToRetailer'
  // Use the above modifers to check if the item is sold
  function shipItemToRetailer(uint _upc) public
         onlyDistributor()
         checkUpcInItems (_upc)
         verifyCaller(items[_upc].distributorID) // Check if caller is the owner of the item
         checkItemState (_upc, State.SoldToRetailer, "Milk is not sold to retailer!")   
    {
    // Update the appropriate fields
    items[_upc].itemState = State.ShippedToRetailer;

    // Emit the appropriate event
    emit ShippedToRetailer(_upc, msg.sender);
  }

  // Define a function 'receiveItemByRetailer' that allows the retailer to mark an item 'ReceivedByRetailer'
  // Use the above modifiers to check if the item is shipped
  function receiveItemByRetailer(uint _upc) public
         onlyRetailer()
         checkUpcInItems (_upc)
         verifyCaller(items[_upc].retailerID) // Check if caller is the owner of the item
         checkItemState (_upc, State.ShippedToRetailer, "Milk is not shipped to retailer!") 
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].itemState = State.ReceivedByRetailer;

    // Emit the appropriate event
    emit ReceivedByRetailer(_upc, msg.sender);
  }

  // Define a function 'sellToSuperMarket' that allows a retailer to mark an item 'ForSaleToSupermarket'
  function sellToSuperMarket(uint _upc, uint _price) public
         onlyRetailer()
         checkUpcInItems (_upc)
         verifyCaller(items[_upc].retailerID) // Check if caller is the owner of the item
         checkItemState (_upc, State.ReceivedByRetailer, "Milk is not received by retailer!")
  {
      // Update the appropriate fields
      items[_upc].itemState = State.ForSaleToSupermarket;
      items[_upc].productPrice = _price;
  
      // Emit the appropriate event
      emit ForSaleToSupermarket(_upc, msg.sender, _price);
  }

  // Define a function 'buyItemBySupermarket' that allows the supermarket to mark an item 'SoldToSupermarket'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItemBySupermarket(uint _upc) public payable
          onlySupermarket()
          checkUpcInItems (_upc)
          checkItemState (_upc, State.ForSaleToSupermarket, "Milk is not for sale to supermarket!")
          paidEnough(items[_upc].productPrice) // Check if buyer has paid enough 
          checkValue(_upc) // Send any excess Ether back to buyer
    {
    // Update the appropriate fields - ownerID, dairyfactoryID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].supermarketID = msg.sender;
    items[_upc].itemState = State.SoldToSupermarket;
    
    // Transfer money to poulterer
    items[_upc].retailerID.transfer(items[_upc].productPrice);
    
    // emit the appropriate event
    emit SoldToSupermarket(_upc, msg.sender);
  }

  // Define a function 'shipItemToSupermarket' that allows the retailer to mark an item 'ShippedToSupermarket'
  // Use the above modifers to check if the item is sold
  function shipItemToSupermarket(uint _upc) public
         onlyRetailer()
         checkUpcInItems (_upc)
         verifyCaller(items[_upc].retailerID) // Check if caller is the owner of the item
         checkItemState (_upc, State.SoldToSupermarket, "Milk is not sold to supermarket!")   
    {
    // Update the appropriate fields
    items[_upc].itemState = State.ShippedToSupermarket;

    // Emit the appropriate event
    emit ShippedToSupermarket(_upc, msg.sender);
  }

  // Define a function 'receiveItemBySupermarket' that allows the retailer to mark an item 'ReceivedBySupermarket'
  // Use the above modifiers to check if the item is shipped
  function receiveItemBySupermarket(uint _upc) public
         onlySupermarket()
         checkUpcInItems (_upc)
         verifyCaller(items[_upc].supermarketID) // Check if caller is the owner of the item
         checkItemState (_upc, State.ShippedToSupermarket, "Milk is not shipped to supermarket!") 
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].itemState = State.ReceivedBySupermarket;

    // Emit the appropriate event
    emit ReceivedBySupermarket(_upc, msg.sender);
  }

  // Define a function 'sellToConsumer' that allows a supermarket to mark an item 'ForSaleToConsumer'
  function sellToConsumer(uint _upc, uint _price) public
         onlySupermarket()
         checkUpcInItems (_upc)
         verifyCaller(items[_upc].supermarketID) // Check if caller is the owner of the item
         checkItemState (_upc, State.ReceivedBySupermarket, "Milk is not received by supermarket!")
  {
      // Update the appropriate fields
      items[_upc].itemState = State.ForSaleToConsumer;
      items[_upc].productPrice = _price;
  
      // Emit the appropriate event
      emit ForSaleToConsumer(_upc, msg.sender, _price);
  }

  // Define a function 'buyItemByConsumer' that allows the supermarket to mark an item 'SoldToConsumer'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItemByConsumer(uint _upc) public payable
          onlyConsumer()
          checkUpcInItems (_upc)
          checkItemState (_upc, State.ForSaleToConsumer, "Milk is not for sale to consumer!")
          paidEnough(items[_upc].productPrice) // Check if buyer has paid enough 
          checkValue(_upc) // Send any excess Ether back to buyer
    {
    // Update the appropriate fields - ownerID, dairyfactoryID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].consumerID = msg.sender;
    items[_upc].itemState = State.SoldToConsumer;
    
    // Transfer money to poulterer
    items[_upc].supermarketID.transfer(items[_upc].productPrice);
    
    // emit the appropriate event
    emit SoldToConsumer(_upc, msg.sender);
  }

  // Define a function 'purchaseItemByConsumer' that allows the consumer to mark an item 'PurchasedByConsumer'
  // Use the above modifiers to check if the item is received
  function purchaseItemByConsumer(uint _upc) public
         onlyConsumer()
         checkUpcInItems (_upc)
         verifyCaller(items[_upc].consumerID) // Check if caller is the owner of the item
         checkItemState (_upc, State.SoldToConsumer, "Milk is not sold to consumer!")
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].itemState = State.PurchasedByConsumer;

    // Emit the appropriate event
    emit PurchasedByConsumer(_upc, msg.sender);
  }

  // Define a function 'fetchItemBufferPublic' that fetches the public data
  function fetchItemBufferPublic(uint _upc) public checkUpcInItems(_upc) view returns 
  (
      uint    itemSKU,
      uint    itemUPC,
      address ownerID,
      address originPoultererID,
      string  memory originFarmName,
      string  memory originFarmInformation,
      string  memory originFarmLatitude,
      string  memory originFarmLongitude,
      State   itemState,
      uint    productPrice,
      address distributorID
  ) 
  {
      // Assign values to the parameters
      Item memory foundedItem = items[_upc];
      itemSKU = foundedItem.sku;
      itemUPC = foundedItem.upc;
      ownerID = foundedItem.ownerID;
      originPoultererID = foundedItem.originPoultererID;
      originFarmName = foundedItem.originFarmName;
      originFarmInformation = foundedItem.originFarmInformation;
      originFarmLatitude = foundedItem.originFarmLatitude;
      originFarmLongitude = foundedItem.originFarmLongitude;
      itemState = foundedItem.itemState;
      productPrice = foundedItem.productPrice;
      distributorID = foundedItem.distributorID;
      return 
      (
      itemSKU,
      itemUPC,
      ownerID,
      originPoultererID,
      originFarmName,
      originFarmInformation,
      originFarmLatitude,
      originFarmLongitude,
      itemState,
      productPrice,
      distributorID
      );
  }

  // Define a function 'fetchItemBufferForDistributor' that fetches the data only for distributor
  function fetchItemBufferDistributor(uint _upc) public checkUpcInItems(_upc) view returns 
  (
      uint    itemSKU,
      uint    itemUPC,
      address ownerID,
      address distributorID,
      string  memory originFarmName,
      string  memory originFarmInformation,
      string  memory originFarmLatitude,
      string  memory originFarmLongitude,
      string  memory productNotes,
      State itemState
  ) 
  {
      // Assign values to the parameters
      Item memory foundedItem = items[_upc];
      itemSKU = foundedItem.sku;
      itemUPC = foundedItem.upc;
      ownerID = foundedItem.ownerID;
      distributorID = foundedItem.distributorID;
      originFarmName = foundedItem.originFarmName;
      originFarmInformation = foundedItem.originFarmInformation;
      originFarmLatitude = foundedItem.originFarmLatitude;
      originFarmLongitude = foundedItem.originFarmLongitude;
      productNotes = foundedItem.productNotes;
      itemState = foundedItem.itemState;
  return 
  (
      itemSKU,
      itemUPC,
      ownerID,
      distributorID,
      originFarmName,
      originFarmInformation,
      originFarmLatitude,
      originFarmLongitude,
      productNotes,
      itemState
  );
  }

  // Define a function 'fetchItemBufferForConsumer' that fetches the data only for consumer
  function fetchItemBufferConsumer(uint _upc) public checkUpcInItems(_upc) view returns 
  (
      uint    itemSKU,
      uint    itemUPC,
      address ownerID,
      address consumerID,
      string  memory originFarmName,
      string  memory productNotes,
      address distributorID,
      State itemState
  ) 
  {
      // Assign values to the parameters
      Item memory foundedItem = items[_upc];
      itemSKU = foundedItem.sku;
      itemUPC = foundedItem.upc;
      ownerID = foundedItem.ownerID;
      consumerID = foundedItem.consumerID;
      originFarmName = foundedItem.originFarmName;
      distributorID = foundedItem.distributorID;
      productNotes = foundedItem.productNotes;
      itemState = foundedItem.itemState;
  return 
  (
      itemSKU,
      itemUPC,
      ownerID,
      consumerID,
      originFarmName,
      productNotes,
      distributorID,
      itemState
  );
  }
}
